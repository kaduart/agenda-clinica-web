<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agenda Clínica Fonoinova</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&family=Playfair+Display:wght@500&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #26977b;
            --primary-light: #e8f0fe;
            --secondary: #329189;
            --accent: #1c8565;
            --accent-light: #e8f9f3;
            --danger: #e74c3c;
            --danger-light: #fdedec;
            --warning: #f39c12;
            --warning-light: #fef5e9;
            --text: #2c3e50;
            --text-light: #7f8c8d;
            --border: #e0e6ed;
            --bg: #f8fafc;
            --card-bg: #ffffff;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: var(--bg);
            color: var(--text);
            line-height: 1.6;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 25px 30px;
            border-radius: 12px 12px 0 0;
        }
        
        h1 {
            font-family: 'Playfair Display', serif;
            font-size: 2rem;
            font-weight: 500;
            margin-bottom: 5px;
        }
        
        .subtitle {
            font-size: 0.9rem;
            opacity: 0.9;
        }
        
        .toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 15px;
            padding: 20px;
            border-bottom: 1px solid var(--border);
            background-color: var(--card-bg);
        }
        
        .filters {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .filter-group {
            position: relative;
        }
        
        .filter-group label {
            position: absolute;
            top: -10px;
            left: 12px;
            background-color: var(--card-bg);
            padding: 0 5px;
            font-size: 0.75rem;
            color: var(--text-light);
        }
        
        .filter-group input, 
        .filter-group select {
            padding: 10px 15px;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-family: inherit;
            min-width: 180px;
            background-color: var(--card-bg);
            transition: all 0.3s ease;
        }
        
        .filter-group input:focus, 
        .filter-group select:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }
        
        .actions {
            display: flex;
            gap: 10px;
        }
        
        button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-family: inherit;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .btn-primary {
            background-color: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background-color: var(--secondary);
            transform: translateY(-2px);
        }
        
        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }
        
        .btn-outline:hover {
            background-color: var(--primary-light);
        }
        
        .days-filter {
            display: flex;
            gap: 8px;
            padding: 0 20px 15px;
            overflow-x: auto;
        }
        
        .day-btn {
            flex: 0 0 auto;
            padding: 8px 15px;
            border-radius: 20px;
            background-color: var(--primary-light);
            color: var(--primary);
            font-size: 0.85rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .day-btn.active {
            background-color: var(--primary);
            color: white;
        }
        
        .day-btn:hover:not(.active) {
            background-color: #d6e3ff;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        thead th {
            background-color: var(--primary-light);
            color: var(--primary);
            padding: 15px;
            text-align: left;
            font-weight: 600;
            position: sticky;
            top: 0;
        }
        
        tbody tr {
            border-bottom: 1px solid var(--border);
            transition: background-color 0.2s ease;
        }
        
        tbody tr:hover {
            background-color: var(--primary-light);
        }
        
        td {
            padding: 15px;
            vertical-align: middle;
        }
        
        .status {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }
        
        .status.confirmed {
            background-color: var(--accent-light);
            color: var(--accent);
        }
        
        .status.pending {
            background-color: var(--warning-light);
            color: var(--warning);
        }
        
        .status.canceled {
            background-color: var(--danger-light);
            color: var(--danger);
        }
        
        .action-btn {
            padding: 6px 12px;
            font-size: 0.85rem;
            border-radius: 6px;
        }
        
        .action-btn.edit {
            background-color: var(--warning-light);
            color: var(--warning);
        }
        
        .action-btn.delete {
            background-color: var(--danger-light);
            color: var(--danger);
        }
        
        .action-btn:hover {
            opacity: 0.8;
            transform: translateY(-1px);
        }
        
        .empty-state {
            padding: 50px 20px;
            text-align: center;
            color: var(--text-light);
        }
        
        /* Modal */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transform: translateY(20px);
            transition: transform 0.3s ease;
        }
        
        .modal.active .modal-content {
            transform: translateY(0);
        }
        
        .modal-header {
            padding: 20px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .modal-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: var(--primary);
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
        }
        
        .modal-body {
            padding: 20px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text);
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--border);
            border-radius: 8px;
            font-family: inherit;
            transition: all 0.3s ease;
        }
        
        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }
        
        .form-group textarea {
            min-height: 80px;
            resize: vertical;
        }
        
        .modal-footer {
            padding: 20px;
            border-top: 1px solid var(--border);
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }
        
        /* Estilos para a paginação */
        .pagination-controls {
            display: flex;
            justify-content: center;
            padding: 20px;
            gap: 10px;
            background-color: var(--card-bg);
            border-top: 1px solid var(--border);
        }
        
        .pagination-controls button {
            padding: 8px 16px;
            border: 1px solid var(--border);
            background-color: var(--card-bg);
            color: var(--text);
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .pagination-controls button:hover:not(:disabled) {
            background-color: var(--primary-light);
            border-color: var(--primary);
        }
        
        .pagination-controls button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Estilos para a lista de profissionais */
        #professionals-list {
            list-style: none;
            padding: 0;
            margin: 0;
            border: 1px solid var(--border);
            border-radius: 8px;
            max-height: 200px;
            overflow-y: auto;
        }
        
        #professionals-list li {
            padding: 10px 15px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        #professionals-list li:last-child {
            border-bottom: none;
        }
        
        #professionals-list li:hover {
            background-color: var(--primary-light);
        }
        
        /* Responsividade */
        @media (max-width: 768px) {
            .toolbar {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .filters {
                width: 100%;
                flex-direction: column;
            }
            
            .filter-group {
                width: 100%;
            }
            
            .filter-group input,
            .filter-group select {
                width: 100%;
            }
            
            .actions {
                width: 100%;
                justify-content: flex-end;
            }
            
            table {
                display: block;
                overflow-x: auto;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Agenda Clínica Fono Inova</h1>
            <p class="subtitle">Controle completo de agendamentos • Clínica Fonoinova</p>
        </header>
        
        <div class="toolbar">
            <div class="filters">
                <div class="filter-group">
                    <label for="date-filter">Data</label>
                    <input type="date" id="date-filter">
                </div>
                
                <div class="filter-group">
                    <label for="professional-filter">Profissional</label>
                    <select id="professional-filter">
                        <option value="">Todos</option>
                    </select>
                </div>
                
                <div class="filter-group">
                    <label for="status-filter">Status</label>
                    <select id="status-filter">
                        <option value="">Todos</option>
                        <option value="confirmed">Confirmado</option>
                        <option value="pending">Pendente</option>
                        <option value="canceled">Cancelado</option>
                    </select>
                </div>
            </div>
            
            <div class="actions">
                <button class="btn-outline" id="search-btn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                    Buscar
                </button>
                <button class="btn-outline" id="manage-professionals-btn">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                    </svg>
                    Profissionais
                </button>
                <button class="btn-primary" id="add-appointment">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M12 5v14m-7-7h14"></path>
                    </svg>
                    Novo Agendamento
                </button>
            </div>
        </div>
        
        <div class="days-filter">
            <button class="day-btn" data-day="0">Dom</button>
            <button class="day-btn" data-day="1">Seg</button>
            <button class="day-btn active" data-day="2">Ter</button>
            <button class="day-btn" data-day="3">Qua</button>
            <button class="day-btn" data-day="4">Qui</button>
            <button class="day-btn" data-day="5">Sex</button>
            <button class="day-btn" data-day="6">Sáb</button>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>Paciente</th>
                    <th>Responsável</th>
                    <th>Data</th>
                    <th>Horário</th>
                    <th>Profissional</th>
                    <th>Especialidade</th>
                    <th>Status</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody id="appointments-body">
                <!-- Os agendamentos serão carregados dinamicamente aqui -->
            </tbody>
        </table>
        
        <div class="pagination-controls" style="display: none;">
            <button id="prev-page-btn" disabled>Anterior</button>
            <span id="page-info">Página 1 de 1</span>
            <button id="next-page-btn" disabled>Próximo</button>
        </div>
    </div>
    
    <!-- Modal para adicionar/editar agendamentos -->
    <div class="modal" id="appointment-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Novo Agendamento</h3>
                <button class="close-btn">&times;</button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label for="patient-name">Paciente</label>
                    <input type="text" id="patient-name" placeholder="Nome completo do paciente">
                </div>
                
                <div class="form-group">
                    <label for="responsible">Responsável</label>
                    <input type="text" id="responsible" placeholder="Nome do responsável">
                </div>
                
                <div class="form-row" style="display: flex; gap: 15px;">
                    <div class="form-group" style="flex: 1;">
                        <label for="appointment-date">Data</label>
                        <input type="date" id="appointment-date">
                    </div>
                    
                    <div class="form-group" style="flex: 1;">
                        <label for="appointment-time">Horário</label>
                        <input type="time" id="appointment-time">
                    </div>
                </div>
                
                <div class="form-row" style="display: flex; gap: 15px;">
                    <div class="form-group" style="flex: 1;">
                        <label for="professional">Profissional</label>
                        <select id="professional">
                            <!-- Preenchido dinamicamente -->
                        </select>
                    </div>
                    
                    <div class="form-group" style="flex: 1;">
                        <label for="specialty">Especialidade</label>
                        <select id="specialty">
                            <option>Fonoaudiologia</option>
                            <option>Psicologia</option>
                            <option>Terapia Ocupacional</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="status">Status</label>
                    <select id="status">
                        <option value="confirmed">Confirmado</option>
                        <option value="pending">Pendente</option>
                        <option value="canceled">Cancelado</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="notes">Observações</label>
                    <textarea id="notes" placeholder="Anotações importantes sobre o atendimento"></textarea>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn-outline close-btn">Cancelar</button>
                <button class="btn-primary" id="save-appointment">Salvar Agendamento</button>
            </div>
        </div>
    </div>
    
    <!-- Modal para gerenciar profissionais -->
    <div class="modal" id="professionals-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Gerenciar Profissionais</h3>
                <button class="close-btn">&times;</button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label for="new-professional">Adicionar Profissional</label>
                    <div style="display: flex; gap: 10px;">
                        <input type="text" id="new-professional" placeholder="Nome do profissional" style="flex: 1;">
                        <button class="btn-primary" id="add-professional-btn">Adicionar</button>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Profissionais Cadastrados</label>
                    <ul id="professionals-list"></ul>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn-outline close-btn">Fechar</button>
            </div>
        </div>
    </div>

    <script>
        // Variáveis globais
        let appointments = [];
        let professionals = []; // Inicialmente vazio - será preenchido conforme necessidade
        let specialties = ["Fonoaudiologia", "Psicologia", "Terapia Ocupacional"];
        let statuses = ["confirmed", "pending", "canceled"];
        let editingId = null;
        let currentPage = 1;
        const itemsPerPage = 20;
        
        // Elementos DOM
        const appointmentModal = document.getElementById('appointment-modal');
        const professionalsModal = document.getElementById('professionals-modal');
        const openModalBtn = document.getElementById('add-appointment');
        const manageProfessionalsBtn = document.getElementById('manage-professionals-btn');
        const closeModalBtns = document.querySelectorAll('.close-btn');
        const appointmentsBody = document.getElementById('appointments-body');
        const saveAppointmentBtn = document.getElementById('save-appointment');
        const addProfessionalBtn = document.getElementById('add-professional-btn');
        const prevPageBtn = document.getElementById('prev-page-btn');
        const nextPageBtn = document.getElementById('next-page-btn');
        const pageInfo = document.getElementById('page-info');
        const paginationControls = document.querySelector('.pagination-controls');
        
        // Inicialização
        document.addEventListener('DOMContentLoaded', () => {
            // Configurar data atual como padrão no filtro
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('date-filter').value = today;
            
            // Carregar dados iniciais
            loadInitialData();
            
            // Configurar eventos
            setupEventListeners();
        });
        
        function setupEventListeners() {
            // Modal de agendamentos
            openModalBtn.addEventListener('click', () => {
                editingId = null;
                document.querySelector('#appointment-modal .modal-title').textContent = 'Novo Agendamento';
                resetAppointmentForm();
                appointmentModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            // Modal de profissionais
            manageProfessionalsBtn.addEventListener('click', () => {
                renderProfessionalsList();
                professionalsModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
            
            // Fechar modais
            closeModalBtns.forEach(btn => {
                btn.addEventListener('click', closeAllModals);
            });
            
            // Fechar ao clicar fora do modal
            appointmentModal.addEventListener('click', (e) => {
                if (e.target === appointmentModal) closeAllModals();
            });
            
            professionalsModal.addEventListener('click', (e) => {
                if (e.target === professionalsModal) closeAllModals();
            });
            
            // Salvar agendamento
            saveAppointmentBtn.addEventListener('click', saveAppointment);
            
            // Adicionar profissional
            addProfessionalBtn.addEventListener('click', addProfessional);
            
            // Filtros por dia da semana
            document.querySelectorAll('.day-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelectorAll('.day-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    filterByDay(parseInt(btn.dataset.day));
                });
            });
            
            // Paginação
            prevPageBtn.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderAppointments();
                }
            });
            
            nextPageBtn.addEventListener('click', () => {
                const totalPages = Math.ceil(appointments.length / itemsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderAppointments();
                }
            });
            
            // Busca
            document.getElementById('search-btn').addEventListener('click', applyFilters);
            document.getElementById('professional-filter').addEventListener('change', applyFilters);
            document.getElementById('status-filter').addEventListener('change', applyFilters);
            document.getElementById('date-filter').addEventListener('change', applyFilters);
        }
        
        function closeAllModals() {
            appointmentModal.classList.remove('active');
            professionalsModal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }
        
        function updateProfessionalSelects() {
            const professionalSelects = document.querySelectorAll('select[id="professional"], select[id="professional-filter"]');
            
            professionalSelects.forEach(select => {
                const currentValue = select.value;
                select.innerHTML = '';
                
                if (select.id === 'professional-filter') {
                    select.innerHTML = '<option value="">Todos</option>';
                }
                
                professionals.forEach(professional => {
                    const option = document.createElement('option');
                    option.value = professional;
                    option.textContent = professional;
                    select.appendChild(option);
                });
                
                if (professionals.includes(currentValue)) {
                    select.value = currentValue;
                }
            });
        }
        
        function loadInitialData() {
            // Aqui você deve implementar a carga de dados inicial
            // Pode ser do localStorage, de uma API, etc.
            
            // Exemplo básico (substitua por sua implementação real):
            /*
            const savedAppointments = localStorage.getItem('appointments');
            if (savedAppointments) {
                appointments = JSON.parse(savedAppointments);
            }
            
            const savedProfessionals = localStorage.getItem('professionals');
            if (savedProfessionals) {
                professionals = JSON.parse(savedProfessionals);
            } else {
                // Valores padrão se não houver profissionais salvos
                professionals = ["Dra. Lorany Siqueira", "Dra. Tatiana Celuta", "Dr. Ricardo Maia"];
            }
            */
            
            updateProfessionalSelects();
            renderAppointments();
        }
        
        function renderAppointments() {
            appointmentsBody.innerHTML = '';
            
            if (appointments.length === 0) {
                appointmentsBody.innerHTML = `
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 30px; color: var(--text-light);">
                            Nenhum agendamento encontrado.
                        </td>
                    </tr>
                `;
                paginationControls.style.display = 'none';
                return;
            }
            
            // Calcular índices para paginação
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const paginatedAppointments = appointments.slice(startIndex, endIndex);
            
            // Usar DocumentFragment para melhor performance
            const fragment = document.createDocumentFragment();
            
            paginatedAppointments.forEach(appointment => {
                const dateObj = new Date(appointment.date);
                const days = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
                const dayOfWeek = days[dateObj.getDay()];
                const formattedDate = `${appointment.date.split('-').reverse().join('/')} (${dayOfWeek})`;
                
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${appointment.patient}</td>
                    <td>${appointment.responsible}</td>
                    <td>${formattedDate}</td>
                    <td>${appointment.time}</td>
                    <td>${appointment.professional}</td>
                    <td>${appointment.specialty}</td>
                    <td><span class="status ${appointment.status}">${getStatusText(appointment.status)}</span></td>
                    <td>
                        <button class="action-btn edit" data-id="${appointment.id}">Editar</button>
                        <button class="action-btn delete" data-id="${appointment.id}">Remover</button>
                    </td>
                `;
                
                fragment.appendChild(tr);
            });
            
            appointmentsBody.appendChild(fragment);
            
            // Adicionar eventos usando delegação para melhor performance
            appointmentsBody.addEventListener('click', (e) => {
                if (e.target.classList.contains('edit')) {
                    editAppointment(e.target.dataset.id);
                } else if (e.target.classList.contains('delete')) {
                    deleteAppointment(e.target.dataset.id);
                }
            });
            
            // Atualizar controles de paginação
            updatePaginationControls();
        }
        
        function updatePaginationControls() {
            const totalPages = Math.ceil(appointments.length / itemsPerPage);
            
            if (totalPages <= 1) {
                paginationControls.style.display = 'none';
                return;
            }
            
            paginationControls.style.display = 'flex';
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages;
            pageInfo.textContent = `Página ${currentPage} de ${totalPages}`;
        }
        
        function getStatusText(status) {
            const statusMap = {
                'confirmed': 'Confirmado',
                'pending': 'Pendente',
                'canceled': 'Cancelado'
            };
            return statusMap[status] || status;
        }
        
        function resetAppointmentForm() {
            document.getElementById('patient-name').value = '';
            document.getElementById('responsible').value = '';
            document.getElementById('appointment-date').value = new Date().toISOString().split('T')[0];
            document.getElementById('appointment-time').value = '08:00';
            document.getElementById('professional').value = professionals[0] || '';
            document.getElementById('specialty').value = specialties[0] || '';
            document.getElementById('status').value = 'confirmed';
            document.getElementById('notes').value = '';
        }
        
        function editAppointment(id) {
            const appointment = appointments.find(a => a.id == id);
            if (!appointment) return;
            
            editingId = id;
            document.querySelector('#appointment-modal .modal-title').textContent = 'Editar Agendamento';
            
            // Preencher formulário com os dados do agendamento
            document.getElementById('patient-name').value = appointment.patient;
            document.getElementById('responsible').value = appointment.responsible;
            document.getElementById('appointment-date').value = appointment.date;
            document.getElementById('appointment-time').value = appointment.time;
            document.getElementById('professional').value = appointment.professional;
            document.getElementById('specialty').value = appointment.specialty;
            document.getElementById('status').value = appointment.status;
            document.getElementById('notes').value = appointment.notes;
            
            appointmentModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
        
        function saveAppointment() {
            const patientName = document.getElementById('patient-name').value.trim();
            const responsible = document.getElementById('responsible').value.trim();
            const date = document.getElementById('appointment-date').value;
            const time = document.getElementById('appointment-time').value;
            const professional = document.getElementById('professional').value;
            const specialty = document.getElementById('specialty').value;
            const status = document.getElementById('status').value;
            const notes = document.getElementById('notes').value.trim();
            
            if (!patientName || !date || !time || !professional) {
                alert('Por favor, preencha todos os campos obrigatórios!');
                return;
            }
            
            const appointmentData = {
                patient: patientName,
                responsible,
                date,
                time,
                professional,
                specialty,
                status,
                notes
            };
            
            if (editingId) {
                // Editar agendamento existente
                const index = appointments.findIndex(a => a.id == editingId);
                if (index !== -1) {
                    appointments[index] = { ...appointments[index], ...appointmentData };
                }
            } else {
                // Criar novo agendamento
                const newId = appointments.length > 0 ? Math.max(...appointments.map(a => a.id)) + 1 : 1;
                appointments.unshift({
                    id: newId,
                    ...appointmentData
                });
            }
            
            // Aqui você deve salvar os dados (localStorage, API, etc.)
            // Exemplo:
            // localStorage.setItem('appointments', JSON.stringify(appointments));
            
            renderAppointments();
            closeAllModals();
        }
        
        function deleteAppointment(id) {
            if (confirm('Tem certeza que deseja remover este agendamento?')) {
                appointments = appointments.filter(a => a.id != id);
                
                // Aqui você deve salvar os dados (localStorage, API, etc.)
                // Exemplo:
                // localStorage.setItem('appointments', JSON.stringify(appointments));
                
                renderAppointments();
            }
        }
        
        function renderProfessionalsList() {
            const list = document.getElementById('professionals-list');
            list.innerHTML = '';
            
            professionals.forEach((professional, index) => {
                const li = document.createElement('li');
                li.innerHTML = `
                    <span>${professional}</span>
                    <button class="action-btn delete" data-index="${index}">Remover</button>
                `;
                list.appendChild(li);
            });
            
            // Adicionar evento de remoção
            list.addEventListener('click', (e) => {
                if (e.target.classList.contains('delete')) {
                    const index = e.target.dataset.index;
                    removeProfessional(index);
                }
            });
        }
        
        function addProfessional() {
            const input = document.getElementById('new-professional');
            const name = input.value.trim();
            
            if (!name) {
                alert('Por favor, insira um nome válido!');
                return;
            }
            
            if (professionals.includes(name)) {
                alert('Este profissional já está cadastrado!');
                return;
            }
            
            professionals.push(name);
            updateProfessionalSelects();
            renderProfessionalsList();
            input.value = '';
            
            // Aqui você deve salvar os profissionais (localStorage, API, etc.)
            // Exemplo:
            // localStorage.setItem('professionals', JSON.stringify(professionals));
        }
        
        function removeProfessional(index) {
            professionals.splice(index, 1);
            updateProfessionalSelects();
            renderProfessionalsList();
            
            // Atualizar agendamentos que usavam esse profissional
            appointments.forEach(app => {
                if (!professionals.includes(app.professional)) {
                    app.professional = professionals[0] || '';
                }
            });
            
            // Aqui você deve salvar os dados (localStorage, API, etc.)
            // Exemplo:
            // localStorage.setItem('professionals', JSON.stringify(professionals));
            // localStorage.setItem('appointments', JSON.stringify(appointments));
            
            renderAppointments();
        }
        
        function filterByDay(dayOfWeek) {
            const filteredAppointments = appointments.filter(appointment => {
                const dateObj = new Date(appointment.date);
                return dateObj.getDay() === dayOfWeek;
            });
            
            // Atualizar a exibição com os agendamentos filtrados
            appointments = filteredAppointments;
            currentPage = 1;
            renderAppointments();
        }
        
        function applyFilters() {
            const dateFilter = document.getElementById('date-filter').value;
            const professionalFilter = document.getElementById('professional-filter').value;
            const statusFilter = document.getElementById('status-filter').value;
            
            let filteredAppointments = [...appointments];
            
            if (dateFilter) {
                filteredAppointments = filteredAppointments.filter(app => app.date === dateFilter);
            }
            
            if (professionalFilter) {
                filteredAppointments = filteredAppointments.filter(app => app.professional === professionalFilter);
            }
            
            if (statusFilter) {
                filteredAppointments = filteredAppointments.filter(app => app.status === statusFilter);
            }
            
            appointments = filteredAppointments;
            currentPage = 1;
            renderAppointments();
        }
    </script>
</body>
</html>